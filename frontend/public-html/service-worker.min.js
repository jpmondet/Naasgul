const CACHE_NAME="cache";const CACHING_DURATION=3e5;const DEBUG=true;self.addEventListener("install",(function(event){event.waitUntil(self.skipWaiting())}));self.addEventListener("activate",(function(event){event.waitUntil(self.clients.claim())}));self.addEventListener("fetch",(event=>{const{request:request}=event;console.log("Trying to fetch in cache"+event+request);event.respondWith(self.caches.open(`${CACHE_NAME}-tiles`).then((cache=>cache.match(request).then((response=>{if(response){DEBUG&&console.log(`SW: serving ${request.url} from cache.`);const expirationDate=Date.parse(response.headers.get("sw-cache-expires"));const now=new Date;if(expirationDate>now){return response}}DEBUG&&console.log(`SW: no match in cache for ${request.url}, using network.`);return fetch(request.url).then((liveResponse=>{const expires=new Date;expires.setSeconds(expires.getSeconds()+CACHING_DURATION);const cachedResponseFields={status:liveResponse.status,statusText:liveResponse.statusText,headers:{"SW-Cache-Expires":expires.toUTCString()}};liveResponse.headers.forEach(((v,k)=>{cachedResponseFields.headers[k]=v}));const returnedResponse=liveResponse.clone();return liveResponse.blob().then((body=>{DEBUG&&console.log(`SW: caching tiles ${request.url} until ${expires.toUTCString()}.`);cache.put(request,new Response(body,cachedResponseFields));return returnedResponse}))}))})))))}));self.addEventListener("message",(event=>{console.log(`SW: received message ${event.data}.`);const eventData=JSON.parse(event.data);if(eventData.action==="PURGE_EXPIRED_TILES"){DEBUG&&console.log("SW: purging expired tiles from cache.");self.caches.open(`${CACHE_NAME}-tiles`).then((cache=>cache.keys().then((keys=>keys.forEach((key=>cache.match(key).then((cachedResponse=>{const expirationDate=Date.parse(cachedResponse.headers.get("sw-cache-expires"));const now=new Date;if(expirationDate<now){DEBUG&&console.log(`SW: purging (expired) tile ${key.url} from cache.`);cache.delete(key)}}))))))))}}));function getExpiresFromHeaders(headers){if(headers.get("cache-control")){const maxAge=headers.get("cache-control").match(/max-age=(\d+)/);return parseInt(maxAge?maxAge[1]:0,10)}if(headers.get("expires")){return parseInt(new Date(headers.get("expires")).getTime()/1e3,10)-(new Date).getTime()}return null}